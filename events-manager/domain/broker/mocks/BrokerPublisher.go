// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BrokerPublisher is an autogenerated mock type for the BrokerPublisher type
type BrokerPublisher struct {
	mock.Mock
}

// PublishMessageWithContext provides a mock function with given fields: ctx, queueName, message, typeMessage
func (_m *BrokerPublisher) PublishMessageWithContext(ctx context.Context, queueName string, message map[string]interface{}, typeMessage string) error {
	ret := _m.Called(ctx, queueName, message, typeMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, string) error); ok {
		r0 = rf(ctx, queueName, message, typeMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueDeclare provides a mock function with given fields: queueName
func (_m *BrokerPublisher) QueueDeclare(queueName string) error {
	ret := _m.Called(queueName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *BrokerPublisher) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewBrokerPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewBrokerPublisher creates a new instance of BrokerPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBrokerPublisher(t mockConstructorTestingTNewBrokerPublisher) *BrokerPublisher {
	mock := &BrokerPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
