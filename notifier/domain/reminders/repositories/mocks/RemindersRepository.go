// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "notifier/domain/reminders/models"

	mock "github.com/stretchr/testify/mock"
)

// RemindersRepository is an autogenerated mock type for the RemindersRepository type
type RemindersRepository struct {
	mock.Mock
}

// AddNewEmailToReminderWithEventId provides a mock function with given fields: ctx, eventId, email
func (_m *RemindersRepository) AddNewEmailToReminderWithEventId(ctx context.Context, eventId string, email string) error {
	ret := _m.Called(ctx, eventId, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, eventId, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReminder provides a mock function with given fields: ctx, reminder
func (_m *RemindersRepository) CreateReminder(ctx context.Context, reminder models.Reminder) (models.Reminder, error) {
	ret := _m.Called(ctx, reminder)

	var r0 models.Reminder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Reminder) (models.Reminder, error)); ok {
		return rf(ctx, reminder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Reminder) models.Reminder); ok {
		r0 = rf(ctx, reminder)
	} else {
		r0 = ret.Get(0).(models.Reminder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Reminder) error); ok {
		r1 = rf(ctx, reminder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePastReminders provides a mock function with given fields: ctx
func (_m *RemindersRepository) DeletePastReminders(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodayReminders provides a mock function with given fields: ctx
func (_m *RemindersRepository) GetAllTodayReminders(ctx context.Context) ([]models.Reminder, error) {
	ret := _m.Called(ctx)

	var r0 []models.Reminder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Reminder, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Reminder); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reminder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRemindersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRemindersRepository creates a new instance of RemindersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRemindersRepository(t mockConstructorTestingTNewRemindersRepository) *RemindersRepository {
	mock := &RemindersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
